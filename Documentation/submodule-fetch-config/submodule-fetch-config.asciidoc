About reading and applying configuration of non-checked out revisions during fetch
==================================================================================


User Stories
------------

----
$ git clone --recurse-submodules your-cool-project
----

Let's say +submodule.recursesubmodules = on+

Superproject has a linear history:

. I would expect "git fetch --recurse-submodules" to run fetch
  in all submodules checked out in the worktree

. I wouldn't expect it to run fetch in old submodules not
  checked out in the worktree, but I wouldn't mind if it did
  either.

. I would expect "git fetch --recurse-submodules" to clone
  any new submodules that I would need to
  "git merge --recurse-submodules FETCH_HEAD", and any submodules
  needed for intermediate states.

Superproject has multiple branches:

. Same as before, but I'd expect it to clone or fetch new and
  existing submodules for existing tip..new tip of all branches.


Plan
----

In superproject

. Lookup all changed submodule names (changed_submodules) received during fetch
  During collection phase: For each revision that changes a submodule
  store:
	.. commit sha1 (for subsequent readings of the same config)
	.. path
	.. name

. For each submodule in the index that is in changed_submodules
	.. Lookup its name from repository config and .gitmodules
	.. Fetch depending on local and checked out configuration
	.. Add submodule to fetched_submodules
	.. Remove submodule from changed_submodules

. For each changed submodule left in list from 1.
	.. Skip and warn if not all found configurations are the same
	.. Fetch or clone depending on configuration from revisions
	.. Add submodule to fetched_submodules

. For each submodule in .git/modules
	.. Skip if in fetched_submodules
	.. Skip and warn if not all configurations are the same
	.. fetch depending on configuration

. If we were given the special option --recurse-submodules=all it
  overrides all revisions, checked out or local recurseSubmodules
  configurations
	.. Parse all commits .gitmodules
	.. Try to fetch or clone all found module names

For expensive operations we might have a different command: +submodule fetch-all+

If the submodule urls disagree and I do not have a local configuration I
stop. Configuration cache needs conflicting configuration marker.
The fallback is to do no fetch and tell the user how to fix it.
e.g.:
----
	git checkout origin/master
	git submodule sync
	git submodule update --init --recursive
----

Configuration (the latter overrides the earlier)
------------------------------------------------

 1. Command line default (e.g. --recurse-submodules-default)
 2. Worktree/Index? .gitmodules (unmerged ?)
 3. Git config (system, user, repo)
 4. Command line option
