About reading and applying configuration of non-checked out revisions during fetch
==================================================================================


User Stories
------------

----
$ git clone --recurse-submodules your-cool-project
----

Whether git will fetch or clone a submodule depends on the value of
'submodule.recursesubmodules' or 'submodule.autoinit' configuration
and their submodule specific configuration. If fetch or clone are given
the --recurse-submodules option the autoinit configuration is assumed to
be true.


Submodule Recursion Checked Out
-------------------------------

I expect all initialized submodules to behave after the local or checked
out configuration (.git/config and .gitmodules).

Let's say we have configured 'submodule.recursesubmodules = on' or given
the '--recurse-submodules[=on]' commandline option to fetch.

Superproject has a linear history:

. I would expect "git fetch" to run fetch in all submodules checked out
  in the worktree

. I wouldn't expect it to run fetch in old submodules not
  checked out in the worktree, but I wouldn't mind if it did
  either.

. I would expect "git fetch" to clone any new submodules that I would
  need to "git merge --recurse-submodules FETCH_HEAD", and any
  submodules needed for intermediate states.

Superproject has multiple branches:

. Same as before, but I'd expect it to clone or fetch new and
  existing submodules for <existing tip>..<new tip> of all branches.


Submodule Recursion On-Demand (local config)
--------------------------------------------
Let's say 'submodule.recursesubmodules = on-demand' or given the
'--recurse-submodules=on-demand' commandline option to fetch.

Superproject has a linear history:

. Same as with '--recurse-submodules=on' but I would only expect fetch
  to fetch or clone submodules that have changed/are new in the commits
  fetched

Superproject hast multiple branches:

. Similar to before but also fetch changed/new submodules between
  <existing tip>..<new tip> of all branches.


Submodule Recursion Off (local config)
--------------------------------------
Let's say 'submodule.recursesubmodules = off' or commandline option
'--recurse-submodules=off' or no config or option.

No submodules will be fetched


Submodule Recursion Not Checked Out
------------------------------------
Let's say the submodule is not in the current index (checked out) and
the .gitmodules in all fetched commits agree on submodule <name>'s config
'submodule.<name>.recursesubmodules = on'

. I would the submodule to be fetched/cloned when the recorded
  submodule-commit was changed in any commit between <existing
  tip>..<new tip>.

. I would not expect the submodule to be fetched/cloned if there was no
  change of the recorded submodule-commit in the fetched commits but I
  would not mind if it was either.

The same applies to 'submodule.<name>.recursesubmodules = on-demand'
except that I would mind if a submodule was fetched which had no change
in the recorded submodule-commit.

Let's assume the same situation as before but the configurations of
'submodule.<name>.recursesubmodules' in .gitmodules of the fetched
commits disagree.

. I would expect git to warn me that the configuration of submodule
  <name> was not the same across all fetched commits.

- I would expect git to skip the recursive fetch of those submodules and
  tell me what I can do to solve this.


Plan
----

In superproject

. Lookup all changed submodule names (changed_submodules) received during fetch
  During collection phase: For each revision that changes a submodule
  store:
	.. commit sha1 (for subsequent readings of the same config)
	.. path
	.. name

. For each submodule in the index that is in changed_submodules
	.. Lookup its name from repository config and .gitmodules
	.. Fetch depending on local and checked out configuration
	.. Add submodule to fetched_submodules
	.. Remove submodule from changed_submodules

. For each changed submodule left in list from 1.
	.. Skip and warn if not all found configurations are the same
	.. Fetch or clone depending on configuration from revisions
	.. Add submodule to fetched_submodules

. For each submodule in .git/modules
	.. Skip if in fetched_submodules
	.. Skip and warn if not all configurations are the same
	.. fetch depending on configuration

. If we were given the special option --recurse-submodules=all it
  overrides all revisions, checked out or local recurseSubmodules
  configurations
	.. Parse all commits .gitmodules
	.. Try to fetch or clone all found module names

For expensive operations we might have a different command: +submodule fetch-all+

If the submodule urls disagree and I do not have a local configuration I
stop. Configuration cache needs conflicting configuration marker.
The fallback is to do no fetch and tell the user how to fix it.
e.g.:
----
	git checkout origin/master
	git submodule sync
	git submodule update --init --recursive
----

Configuration (the latter overrides the earlier)
------------------------------------------------

 1. Command line default (e.g. --recurse-submodules-default)
 2. Worktree/Index? .gitmodules (unmerged ?)
 3. Git config (system, user, repo)
 4. Command line option
